// AUTOGENERATED
package {{.Package}}

import (
	{{range .Imports}}{{.}}
	{{end}}
)

const prefix = "{{.Name}}"

type Client struct {
	base        clientpkg.HttpClient
	rm          *response.Response
	headers     map[string]string
}

func Flags() *pflag.FlagSet {
	fs := pflag.NewFlagSet(prefix, pflag.ExitOnError)
	fs.AddFlagSet(clientpkg.Flags(prefix))
	{{range .Headers}}
	fs.String(clientpkg.GetFlagWithPrefix(prefix,"{{.}}"),"",strings.ToUpper(clientpkg.ToSnakeCase(clientpkg.GetFlagWithPrefix(prefix,"{{.}}")))){{end}}
	return fs
}

func New(httpClient *http.Client,rm *response.Response) (*Client, error) {
	b, err := clientpkg.NewWithFlags(prefix, httpClient)
	if err != nil {
		return nil, err
	}
	headers := map[string]string{}
	{{range .Headers}}headers["{{.}}"] = viper.GetString(clientpkg.GetFlagWithPrefix(prefix,"{{.}}"))
    {{end}}
	return &Client{
		base:       b,
		rm:         rm,
		headers:    headers,
	}, nil
}



// Ping auto generated
func (c *Client) Ping(ctx context.Context) bool {
	requestDataInternal := clientpkg.NewRequestData("/healthcheck", http.MethodGet, nil, nil, clientpkg.MergeMap[string](nil, c.headers))
	resp := c.base.Request(ctx, requestDataInternal, nil,true)
	return resp.Status == http.StatusOK
}

