
        /**
         * {{.Name}} auto generated
         * @param {Pagination} pagination
         * {{if .RequestType}}@param {{"{"}}{{.RequestType}}{{"}"}} {{.RequestTypeName}}
         * {{end}}  {{range .MuxVars}}
         * @param {string} {{.}}{{end}}
         * {{if .UsesQueryParams }}{{range .QueryParams}}
         * @param {string} {{.}}
         * {{end}}{{end}}
         * {{if .Return}}@return {{"{"}}{{.Return}}{{if .UseIterator}}Iterator{{end}}{{"}"}}{{end}}
         */
        async {{.Name}}({{if .RequestType}}{{.RequestTypeName}}, {{end}}{{range .MuxVars}}{{.}},{{end}}{{if .UsesQueryParams }}{{range .QueryParams}}{{.}} ,{{end}}{{end}}pagination){
            const config = {}
            const path = {{.Path}}
            config.method = '{{.MethodType}}'
            config.baseURL = nuxtApp.$config.public.{{.UrlEnvVarName}}
            if (pagination == null){
                pagination = new Pagination(null)
            }
            let params = {}
            params["items_per_page"] = pagination.ItemsPerPage
            params["page"] = pagination.ItemsPerPage{{range .QueryParams}}
            params["{{.}}"] = {{.}}{{end}}

            config.params = params
            {{if .RequestType}}config.data = {{.RequestTypeName}}.serialize() {{end}} {{if .UseIterator}}
            try {
                const response = await nuxtApp.$axios(path,config)
                return new {{.DataTypeName}}Iterator(nuxtApp.$axios,path,config,response,pagination)
            }catch(err){
                let iter = new {{.DataTypeName}}Iterator(nuxtApp.$axios,path,config,null,null)
                iter.err = err
                return iter
            }{{else}}

            return nuxtApp.$axios(path,config){{end}}
        }